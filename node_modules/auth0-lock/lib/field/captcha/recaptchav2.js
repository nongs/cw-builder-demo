'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.render = render;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _immutable = require('immutable');

var _index = require('../../core/index');

var l = _interopRequireWildcard(_index);

var _store = require('../../store');

var _captcha = require('../captcha');

var captcha = _interopRequireWildcard(_captcha);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isScriptAvailable(scriptUrl) {
  //check the window object
  if (window.grecaptcha && typeof window.grecaptcha.render === 'function') {
    return true;
  }
  //check the scripts element, it might be loading
  var allScripts = new _immutable.Set(document.scripts);
  return allScripts.some(function (s) {
    return s.src === scriptUrl;
  });
}

function injectGoogleCaptchaIfMissing(lock) {
  var lang = l.ui.language(lock);
  var scriptUrl = 'https://www.google.com/recaptcha/api.js?hl=' + lang;
  if (isScriptAvailable(scriptUrl)) {
    return;
  }
  var script = document.createElement('script');
  script.src = scriptUrl;
  script.async = true;
  document.body.appendChild(script);
}

/**
 * waits until google recaptcha is ready and renders
 */
function renderElement(lock, el, prop) {
  if (!window.grecaptcha || typeof window.grecaptcha.render !== 'function') {
    return setTimeout(function () {
      return renderElement(lock, el, prop);
    }, 100);
  }

  var id = l.id(lock);
  try {
    window.grecaptcha.render(el, _extends({
      callback: function callback(value) {
        (0, _store.swap)(_store.updateEntity, 'lock', id, captcha.set, value, false);
      },
      'expired-callback': function expiredCallback() {
        (0, _store.swap)(_store.updateEntity, 'lock', id, captcha.reset);
      }
    }, prop));
  } catch (err) {}
}

function render(lock, element, properties) {
  if (!element || element.innerHTML !== '') {
    return;
  }

  injectGoogleCaptchaIfMissing(lock);

  renderElement(lock, element, properties);
}

exports.default = function (_ref) {
  var lock = _ref.lock,
      siteKey = _ref.siteKey;
  return _react2.default.createElement('div', {
    style: { transform: 'scale(0.86)', transformOrigin: '0 0', position: 'relative' },
    className: 'auth0-lock-recaptchav2',
    ref: function ref(el) {
      return render(lock, el, { sitekey: siteKey });
    }
  });
};
